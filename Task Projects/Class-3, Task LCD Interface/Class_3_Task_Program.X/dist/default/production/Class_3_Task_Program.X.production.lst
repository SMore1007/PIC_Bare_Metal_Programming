

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Mar 10 21:23:58 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0094                     SSPSTAT         equ	148	;# 
   107     0098                     TXSTA           equ	152	;# 
   108     0099                     SPBRG           equ	153	;# 
   109     009C                     CMCON           equ	156	;# 
   110     009D                     CVRCON          equ	157	;# 
   111     009E                     ADRESL          equ	158	;# 
   112     009F                     ADCON1          equ	159	;# 
   113     010C                     EEDATA          equ	268	;# 
   114     010D                     EEADR           equ	269	;# 
   115     010E                     EEDATH          equ	270	;# 
   116     010F                     EEADRH          equ	271	;# 
   117     018C                     EECON1          equ	396	;# 
   118     018D                     EECON2          equ	397	;# 
   119     0000                     INDF            equ	0	;# 
   120     0001                     TMR0            equ	1	;# 
   121     0002                     PCL             equ	2	;# 
   122     0003                     STATUS          equ	3	;# 
   123     0004                     FSR             equ	4	;# 
   124     0005                     PORTA           equ	5	;# 
   125     0006                     PORTB           equ	6	;# 
   126     0007                     PORTC           equ	7	;# 
   127     0008                     PORTD           equ	8	;# 
   128     0009                     PORTE           equ	9	;# 
   129     000A                     PCLATH          equ	10	;# 
   130     000B                     INTCON          equ	11	;# 
   131     000C                     PIR1            equ	12	;# 
   132     000D                     PIR2            equ	13	;# 
   133     000E                     TMR1            equ	14	;# 
   134     000E                     TMR1L           equ	14	;# 
   135     000F                     TMR1H           equ	15	;# 
   136     0010                     T1CON           equ	16	;# 
   137     0011                     TMR2            equ	17	;# 
   138     0012                     T2CON           equ	18	;# 
   139     0013                     SSPBUF          equ	19	;# 
   140     0014                     SSPCON          equ	20	;# 
   141     0015                     CCPR1           equ	21	;# 
   142     0015                     CCPR1L          equ	21	;# 
   143     0016                     CCPR1H          equ	22	;# 
   144     0017                     CCP1CON         equ	23	;# 
   145     0018                     RCSTA           equ	24	;# 
   146     0019                     TXREG           equ	25	;# 
   147     001A                     RCREG           equ	26	;# 
   148     001B                     CCPR2           equ	27	;# 
   149     001B                     CCPR2L          equ	27	;# 
   150     001C                     CCPR2H          equ	28	;# 
   151     001D                     CCP2CON         equ	29	;# 
   152     001E                     ADRESH          equ	30	;# 
   153     001F                     ADCON0          equ	31	;# 
   154     0081                     OPTION_REG      equ	129	;# 
   155     0085                     TRISA           equ	133	;# 
   156     0086                     TRISB           equ	134	;# 
   157     0087                     TRISC           equ	135	;# 
   158     0088                     TRISD           equ	136	;# 
   159     0089                     TRISE           equ	137	;# 
   160     008C                     PIE1            equ	140	;# 
   161     008D                     PIE2            equ	141	;# 
   162     008E                     PCON            equ	142	;# 
   163     0091                     SSPCON2         equ	145	;# 
   164     0092                     PR2             equ	146	;# 
   165     0093                     SSPADD          equ	147	;# 
   166     0094                     SSPSTAT         equ	148	;# 
   167     0098                     TXSTA           equ	152	;# 
   168     0099                     SPBRG           equ	153	;# 
   169     009C                     CMCON           equ	156	;# 
   170     009D                     CVRCON          equ	157	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179                           
   180                           	psect	idataBANK0
   181     06D2                     __pidataBANK0:
   182                           
   183                           ;initializer for _name
   184     06D2  3453               	retlw	83
   185     06D3  3441               	retlw	65
   186     06D4  3447               	retlw	71
   187     06D5  3441               	retlw	65
   188     06D6  3452               	retlw	82
   189     06D7  3400               	retlw	0
   190     06D8  3400               	retlw	0
   191     06D9  3400               	retlw	0
   192     06DA  3400               	retlw	0
   193     06DB  3400               	retlw	0
   194     06DC  3400               	retlw	0
   195     06DD  3400               	retlw	0
   196     06DE  3400               	retlw	0
   197     06DF  3400               	retlw	0
   198     06E0  3400               	retlw	0
   199     06E1  3400               	retlw	0
   200     06E2  3400               	retlw	0
   201     06E3  3400               	retlw	0
   202     0008                     _PORTD          set	8
   203     0007                     _PORTC          set	7
   204     0088                     _TRISD          set	136
   205     0087                     _TRISC          set	135
   206                           
   207                           	psect	cinit
   208     07EB                     start_initialization:	
   209                           ; #config settings
   210                           
   211     07EB                     __initialization:
   212                           
   213                           ; Initialize objects allocated to BANK0
   214     07EB  1383               	bcf	3,7	;select IRP bank0
   215     07EC  3032               	movlw	low (__pdataBANK0+18)
   216     07ED  00FD               	movwf	btemp+-1
   217     07EE  3006               	movlw	high __pidataBANK0
   218     07EF  00FE               	movwf	btemp
   219     07F0  30D2               	movlw	low __pidataBANK0
   220     07F1  00FF               	movwf	btemp+1
   221     07F2  3020               	movlw	low __pdataBANK0
   222     07F3  0084               	movwf	4
   223     07F4  120A  118A  26E8  120A  118A  	fcall	init_ram0
   224                           
   225                           ; Clear objects allocated to COMMON
   226     07F9  01F9               	clrf	__pbssCOMMON& (0+127)
   227     07FA  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   228     07FB  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   229     07FC                     end_of_initialization:	
   230                           ;End of C runtime variable initialization code
   231                           
   232     07FC                     __end_of__initialization:
   233     07FC  0183               	clrf	3
   234     07FD  120A  118A  2F2A   	ljmp	_main	;jump to C main() function
   235                           
   236                           	psect	bssCOMMON
   237     0079                     __pbssCOMMON:
   238     0079                     _m:
   239     0079                     	ds	1
   240     007A                     _i:
   241     007A                     	ds	1
   242     007B                     _x:
   243     007B                     	ds	1
   244                           
   245                           	psect	dataBANK0
   246     0020                     __pdataBANK0:
   247     0020                     _name:
   248     0020                     	ds	18
   249                           
   250                           	psect	inittext
   251     06E4                     init_fetch0:	
   252                           ;	Called with low address in FSR and high address in W
   253                           
   254     06E4  087E               	movf	btemp,w
   255     06E5  008A               	movwf	10
   256     06E6  087F               	movf	btemp+1,w
   257     06E7  0082               	movwf	2
   258     06E8                     init_ram0:	
   259                           ;Called with:
   260                           ;	high address of idata address in btemp 
   261                           ;	low address of idata address in btemp+1 
   262                           ;	low address of data in FSR
   263                           ;	high address + 1 of data in btemp-1
   264                           
   265     06E8  120A  118A  26E4  120A  118A  	fcall	init_fetch0
   266     06ED  0080               	movwf	0
   267     06EE  0A84               	incf	4,f
   268     06EF  0804               	movf	4,w
   269     06F0  067D               	xorwf	btemp+-1,w
   270     06F1  1903               	btfsc	3,2
   271     06F2  3400               	retlw	0
   272     06F3  0AFF               	incf	btemp+1,f
   273     06F4  1903               	btfsc	3,2
   274     06F5  0AFE               	incf	btemp,f
   275     06F6  2EE8               	goto	init_ram0
   276                           
   277                           	psect	cstackCOMMON
   278     0070                     __pcstackCOMMON:
   279     0070                     ?_Lcdinit:
   280     0070                     ?_LcdCommand:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0070                     ?_LcdData:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0070                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0070                     ??_LcdCommand:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ??_LcdData:	
   293                           ; 1 bytes @ 0x0
   294                           
   295                           
   296                           ; 1 bytes @ 0x0
   297     0070                     	ds	3
   298     0073                     LcdData@i:
   299     0073                     LcdCommand@i:	
   300                           ; 1 bytes @ 0x3
   301                           
   302                           
   303                           ; 1 bytes @ 0x3
   304     0073                     	ds	1
   305     0074                     ??_Lcdinit:
   306                           
   307                           ; 1 bytes @ 0x4
   308     0074                     	ds	3
   309     0077                     main@i:
   310     0077                     ??_main:	
   311                           ; 1 bytes @ 0x7
   312                           
   313                           
   314                           ; 1 bytes @ 0x7
   315     0077                     	ds	1
   316     0078                     main@i_56:
   317                           
   318                           ; 1 bytes @ 0x8
   319     0078                     	ds	1
   320                           
   321                           	psect	maintext
   322     072A                     __pmaintext:	
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 31 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  i               1    8[COMMON] unsigned char 
   333 ;;  i               1    7[COMMON] unsigned char 
   334 ;; Return value:  Size  Location     Type
   335 ;;                  1    wreg      void 
   336 ;; Registers used:
   337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   338 ;; Tracked objects:
   339 ;;		On entry : B00/0
   340 ;;		On exit  : 0/0
   341 ;;		Unchanged: 0/0
   342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   343 ;;      Params:         0       0       0       0       0
   344 ;;      Locals:         2       0       0       0       0
   345 ;;      Temps:          0       0       0       0       0
   346 ;;      Totals:         2       0       0       0       0
   347 ;;Total ram usage:        2 bytes
   348 ;; Hardware stack levels required when called: 2
   349 ;; This function calls:
   350 ;;		_LcdCommand
   351 ;;		_LcdData
   352 ;;		_Lcdinit
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358     072A                     _main:	
   359                           ;psect for function _main
   360                           
   361     072A                     l633:	
   362                           ;incstack = 0
   363                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   364                           
   365                           
   366                           ;main.c: 33: {
   367     072A  120A  118A  2767  120A  118A  	fcall	_Lcdinit
   368     072F                     l635:
   369                           
   370                           ;main.c: 36: 
   371     072F  01F7               	clrf	main@i
   372     0730                     l641:
   373                           
   374                           ;main.c: 37:     _delay((unsigned long)((100)*(20000000/4000.0)));;main.c: 38: 
   375     0730  0877               	movf	main@i,w
   376     0731  3E82               	addlw	130
   377     0732  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   378     0737                     l643:
   379                           
   380                           ;main.c: 39: 
   381     0737  0877               	movf	main@i,w
   382     0738  3E20               	addlw	(low (_name| 0))& (0+255)
   383     0739  0084               	movwf	4
   384     073A  1383               	bcf	3,7	;select IRP bank0
   385     073B  0800               	movf	0,w
   386     073C  120A  118A  26F7  120A  118A  	fcall	_LcdData
   387     0741                     l645:
   388                           
   389                           ;main.c: 40:     LcdCommand(0x30);
   390     0741  3001               	movlw	1
   391     0742  07F7               	addwf	main@i,f
   392     0743                     l647:
   393     0743  300B               	movlw	11
   394     0744  0277               	subwf	main@i,w
   395     0745  1C03               	skipc
   396     0746  2F48               	goto	u11
   397     0747  2F49               	goto	u10
   398     0748                     u11:
   399     0748  2F30               	goto	l641
   400     0749                     u10:
   401     0749                     l649:
   402                           
   403                           ;main.c: 43:     _delay((unsigned long)((100)*(20000000/4000.0)));
   404     0749  01F8               	clrf	main@i_56
   405     074A                     l655:
   406                           
   407                           ;main.c: 44:     LcdCommand(0x30);;main.c: 45:     _delay((unsigned long)((100)*(2000000
      +                          0/4000.0)));
   408     074A  0878               	movf	main@i_56,w
   409     074B  3CCD               	sublw	205
   410     074C  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   411     0751                     l657:
   412                           
   413                           ;main.c: 46: 
   414     0751  0878               	movf	main@i_56,w
   415     0752  3E20               	addlw	(low (_name| 0))& (0+255)
   416     0753  0084               	movwf	4
   417     0754  1383               	bcf	3,7	;select IRP bank0
   418     0755  0800               	movf	0,w
   419     0756  120A  118A  26F7  120A  118A  	fcall	_LcdData
   420     075B                     l659:
   421                           
   422                           ;main.c: 47:     LcdCommand(0x38);
   423     075B  3001               	movlw	1
   424     075C  07F8               	addwf	main@i_56,f
   425     075D                     l661:
   426     075D  300B               	movlw	11
   427     075E  0278               	subwf	main@i_56,w
   428     075F  1C03               	skipc
   429     0760  2F62               	goto	u21
   430     0761  2F63               	goto	u20
   431     0762                     u21:
   432     0762  2F4A               	goto	l655
   433     0763                     u20:
   434     0763                     l33:	
   435                           ;main.c: 49: 
   436                           
   437     0763  2F63               	goto	l33
   438     0764  120A  118A  2800   	ljmp	start
   439     0767                     __end_of_main:
   440                           
   441                           	psect	text1
   442     0767                     __ptext1:	
   443 ;; *************** function _Lcdinit *****************
   444 ;; Defined at:
   445 ;;		line 53 in file "main.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;		None
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, status,2, status,0, pclath, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : 0/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   459 ;;      Params:         0       0       0       0       0
   460 ;;      Locals:         0       0       0       0       0
   461 ;;      Temps:          3       0       0       0       0
   462 ;;      Totals:         3       0       0       0       0
   463 ;;Total ram usage:        3 bytes
   464 ;; Hardware stack levels used: 1
   465 ;; Hardware stack levels required when called: 1
   466 ;; This function calls:
   467 ;;		_LcdCommand
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473     0767                     _Lcdinit:	
   474                           ;psect for function _Lcdinit
   475                           
   476     0767                     l597:	
   477                           ;incstack = 0
   478                           ; Regs used in _Lcdinit: [wreg+status,2+status,0+pclath+cstack]
   479                           
   480                           
   481                           ;main.c: 55: }
   482     0767  1683               	bsf	3,5	;RP0=1, select bank1
   483     0768  1303               	bcf	3,6	;RP1=0, select bank1
   484     0769  0187               	clrf	7	;volatile
   485                           
   486                           ;main.c: 56: 
   487     076A  0188               	clrf	8	;volatile
   488     076B                     l599:
   489                           
   490                           ;main.c: 58: void LcdData(uint8_t i)
   491     076B  3003               	movlw	3
   492     076C  00F6               	movwf	??_Lcdinit+2
   493     076D  308A               	movlw	138
   494     076E  00F5               	movwf	??_Lcdinit+1
   495     076F  3055               	movlw	85
   496     0770  00F4               	movwf	??_Lcdinit
   497     0771                     u37:
   498     0771  0BF4               	decfsz	??_Lcdinit,f
   499     0772  2F71               	goto	u37
   500     0773  0BF5               	decfsz	??_Lcdinit+1,f
   501     0774  2F71               	goto	u37
   502     0775  0BF6               	decfsz	??_Lcdinit+2,f
   503     0776  2F71               	goto	u37
   504     0777  2F78               	nop2
   505     0778                     l601:
   506                           
   507                           ;main.c: 61:     PORTD = i;
   508     0778  3030               	movlw	48
   509     0779  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   510     077E                     l603:
   511                           
   512                           ;main.c: 62:     PORTC |= (0x1 << 0);
   513     077E  3003               	movlw	3
   514     077F  00F6               	movwf	??_Lcdinit+2
   515     0780  308A               	movlw	138
   516     0781  00F5               	movwf	??_Lcdinit+1
   517     0782  3055               	movlw	85
   518     0783  00F4               	movwf	??_Lcdinit
   519     0784                     u47:
   520     0784  0BF4               	decfsz	??_Lcdinit,f
   521     0785  2F84               	goto	u47
   522     0786  0BF5               	decfsz	??_Lcdinit+1,f
   523     0787  2F84               	goto	u47
   524     0788  0BF6               	decfsz	??_Lcdinit+2,f
   525     0789  2F84               	goto	u47
   526     078A  2F8B               	nop2
   527     078B                     l605:
   528                           
   529                           ;main.c: 63:     _delay((unsigned long)((100)*(20000000/4000.0)));
   530     078B  3030               	movlw	48
   531     078C  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   532     0791                     l607:
   533                           
   534                           ;main.c: 64:     PORTC &= ~(0x1 << 0);
   535     0791  3003               	movlw	3
   536     0792  00F6               	movwf	??_Lcdinit+2
   537     0793  308A               	movlw	138
   538     0794  00F5               	movwf	??_Lcdinit+1
   539     0795  3055               	movlw	85
   540     0796  00F4               	movwf	??_Lcdinit
   541     0797                     u57:
   542     0797  0BF4               	decfsz	??_Lcdinit,f
   543     0798  2F97               	goto	u57
   544     0799  0BF5               	decfsz	??_Lcdinit+1,f
   545     079A  2F97               	goto	u57
   546     079B  0BF6               	decfsz	??_Lcdinit+2,f
   547     079C  2F97               	goto	u57
   548     079D  2F9E               	nop2
   549     079E                     l609:
   550                           
   551                           ;main.c: 65: }
   552     079E  3030               	movlw	48
   553     079F  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   554     07A4                     l611:
   555                           
   556                           ;main.c: 66: 
   557     07A4  3003               	movlw	3
   558     07A5  00F6               	movwf	??_Lcdinit+2
   559     07A6  308A               	movlw	138
   560     07A7  00F5               	movwf	??_Lcdinit+1
   561     07A8  3055               	movlw	85
   562     07A9  00F4               	movwf	??_Lcdinit
   563     07AA                     u67:
   564     07AA  0BF4               	decfsz	??_Lcdinit,f
   565     07AB  2FAA               	goto	u67
   566     07AC  0BF5               	decfsz	??_Lcdinit+1,f
   567     07AD  2FAA               	goto	u67
   568     07AE  0BF6               	decfsz	??_Lcdinit+2,f
   569     07AF  2FAA               	goto	u67
   570     07B0  2FB1               	nop2
   571     07B1                     l613:
   572                           
   573                           ;main.c: 68: void LcdCommand(uint8_t i)
   574     07B1  3038               	movlw	56
   575     07B2  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   576     07B7                     l615:
   577                           
   578                           ;main.c: 69: {
   579     07B7  3003               	movlw	3
   580     07B8  00F6               	movwf	??_Lcdinit+2
   581     07B9  308A               	movlw	138
   582     07BA  00F5               	movwf	??_Lcdinit+1
   583     07BB  3055               	movlw	85
   584     07BC  00F4               	movwf	??_Lcdinit
   585     07BD                     u77:
   586     07BD  0BF4               	decfsz	??_Lcdinit,f
   587     07BE  2FBD               	goto	u77
   588     07BF  0BF5               	decfsz	??_Lcdinit+1,f
   589     07C0  2FBD               	goto	u77
   590     07C1  0BF6               	decfsz	??_Lcdinit+2,f
   591     07C2  2FBD               	goto	u77
   592     07C3  2FC4               	nop2
   593     07C4                     l617:
   594                           
   595                           ;main.c: 71:     PORTD = i;
   596     07C4  300C               	movlw	12
   597     07C5  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   598     07CA                     l619:
   599                           
   600                           ;main.c: 72:     PORTC |= (0x1 << 0);
   601     07CA  3003               	movlw	3
   602     07CB  00F6               	movwf	??_Lcdinit+2
   603     07CC  308A               	movlw	138
   604     07CD  00F5               	movwf	??_Lcdinit+1
   605     07CE  3055               	movlw	85
   606     07CF  00F4               	movwf	??_Lcdinit
   607     07D0                     u87:
   608     07D0  0BF4               	decfsz	??_Lcdinit,f
   609     07D1  2FD0               	goto	u87
   610     07D2  0BF5               	decfsz	??_Lcdinit+1,f
   611     07D3  2FD0               	goto	u87
   612     07D4  0BF6               	decfsz	??_Lcdinit+2,f
   613     07D5  2FD0               	goto	u87
   614     07D6  2FD7               	nop2
   615     07D7                     l621:
   616                           
   617                           ;main.c: 74:     PORTC &= ~(0x1 << 0);
   618     07D7  3001               	movlw	1
   619     07D8  120A  118A  2710  120A  118A  	fcall	_LcdCommand
   620     07DD                     l623:
   621                           
   622                           ;main.c: 75: }
   623     07DD  3003               	movlw	3
   624     07DE  00F6               	movwf	??_Lcdinit+2
   625     07DF  308A               	movlw	138
   626     07E0  00F5               	movwf	??_Lcdinit+1
   627     07E1  3055               	movlw	85
   628     07E2  00F4               	movwf	??_Lcdinit
   629     07E3                     u97:
   630     07E3  0BF4               	decfsz	??_Lcdinit,f
   631     07E4  2FE3               	goto	u97
   632     07E5  0BF5               	decfsz	??_Lcdinit+1,f
   633     07E6  2FE3               	goto	u97
   634     07E7  0BF6               	decfsz	??_Lcdinit+2,f
   635     07E8  2FE3               	goto	u97
   636     07E9  2FEA               	nop2
   637     07EA                     l39:
   638     07EA  0008               	return
   639     07EB                     __end_of_Lcdinit:
   640                           
   641                           	psect	text2
   642     0710                     __ptext2:	
   643 ;; *************** function _LcdCommand *****************
   644 ;; Defined at:
   645 ;;		line 89 in file "main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  i               1    wreg     unsigned char 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  i               1    3[COMMON] unsigned char 
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   659 ;;      Params:         0       0       0       0       0
   660 ;;      Locals:         1       0       0       0       0
   661 ;;      Temps:          3       0       0       0       0
   662 ;;      Totals:         4       0       0       0       0
   663 ;;Total ram usage:        4 bytes
   664 ;; Hardware stack levels used: 1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;;		_Lcdinit
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673     0710                     _LcdCommand:	
   674                           ;psect for function _LcdCommand
   675                           
   676                           
   677                           ;incstack = 0
   678                           ; Regs used in _LcdCommand: [wreg+status,2+status,0]
   679                           ;LcdCommand@i stored from wreg
   680     0710  00F3               	movwf	LcdCommand@i
   681     0711                     l589:
   682     0711  30F7               	movlw	247
   683     0712  1283               	bcf	3,5	;RP0=0, select bank0
   684     0713  1303               	bcf	3,6	;RP1=0, select bank0
   685     0714  0587               	andwf	7,f	;volatile
   686     0715                     l591:
   687     0715  0873               	movf	LcdCommand@i,w
   688     0716  0088               	movwf	8	;volatile
   689     0717                     l593:
   690     0717  1407               	bsf	7,0	;volatile
   691     0718                     l595:
   692     0718  3003               	movlw	3
   693     0719  00F2               	movwf	??_LcdCommand+2
   694     071A  308A               	movlw	138
   695     071B  00F1               	movwf	??_LcdCommand+1
   696     071C  3055               	movlw	85
   697     071D  00F0               	movwf	??_LcdCommand
   698     071E                     u107:
   699     071E  0BF0               	decfsz	??_LcdCommand,f
   700     071F  2F1E               	goto	u107
   701     0720  0BF1               	decfsz	??_LcdCommand+1,f
   702     0721  2F1E               	goto	u107
   703     0722  0BF2               	decfsz	??_LcdCommand+2,f
   704     0723  2F1E               	goto	u107
   705     0724  2F25               	nop2
   706     0725  30FE               	movlw	254
   707     0726  1283               	bcf	3,5	;RP0=0, select bank0
   708     0727  1303               	bcf	3,6	;RP1=0, select bank0
   709     0728  0587               	andwf	7,f	;volatile
   710     0729                     l45:
   711     0729  0008               	return
   712     072A                     __end_of_LcdCommand:
   713                           
   714                           	psect	text3
   715     06F7                     __ptext3:	
   716 ;; *************** function _LcdData *****************
   717 ;; Defined at:
   718 ;;		line 79 in file "main.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;  i               1    wreg     unsigned char 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  i               1    3[COMMON] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   732 ;;      Params:         0       0       0       0       0
   733 ;;      Locals:         1       0       0       0       0
   734 ;;      Temps:          3       0       0       0       0
   735 ;;      Totals:         4       0       0       0       0
   736 ;;Total ram usage:        4 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; This function calls:
   739 ;;		Nothing
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745     06F7                     _LcdData:	
   746                           ;psect for function _LcdData
   747                           
   748                           
   749                           ;incstack = 0
   750                           ; Regs used in _LcdData: [wreg+status,2+status,0]
   751                           ;LcdData@i stored from wreg
   752     06F7  00F3               	movwf	LcdData@i
   753     06F8                     l625:
   754     06F8  1283               	bcf	3,5	;RP0=0, select bank0
   755     06F9  1303               	bcf	3,6	;RP1=0, select bank0
   756     06FA  1587               	bsf	7,3	;volatile
   757     06FB                     l627:
   758     06FB  0873               	movf	LcdData@i,w
   759     06FC  0088               	movwf	8	;volatile
   760     06FD                     l629:
   761     06FD  1407               	bsf	7,0	;volatile
   762     06FE  3003               	movlw	3
   763     06FF  00F2               	movwf	??_LcdData+2
   764     0700  308A               	movlw	138
   765     0701  00F1               	movwf	??_LcdData+1
   766     0702  3055               	movlw	85
   767     0703  00F0               	movwf	??_LcdData
   768     0704                     u117:
   769     0704  0BF0               	decfsz	??_LcdData,f
   770     0705  2F04               	goto	u117
   771     0706  0BF1               	decfsz	??_LcdData+1,f
   772     0707  2F04               	goto	u117
   773     0708  0BF2               	decfsz	??_LcdData+2,f
   774     0709  2F04               	goto	u117
   775     070A  2F0B               	nop2
   776     070B                     l631:
   777     070B  30FE               	movlw	254
   778     070C  1283               	bcf	3,5	;RP0=0, select bank0
   779     070D  1303               	bcf	3,6	;RP1=0, select bank0
   780     070E  0587               	andwf	7,f	;volatile
   781     070F                     l42:
   782     070F  0008               	return
   783     0710                     __end_of_LcdData:
   784     0002                     ___latbits      equ	2
   785     007E                     btemp           set	126	;btemp
   786     007E                     wtemp0          set	126
   787                           
   788                           	psect	config
   789                           
   790                           ;Config register CONFIG @ 0x2007
   791                           ;	Oscillator Selection bits
   792                           ;	FOSC = HS, HS oscillator
   793                           ;	Watchdog Timer Enable bit
   794                           ;	WDTE = OFF, WDT disabled
   795                           ;	Power-up Timer Enable bit
   796                           ;	PWRTE = OFF, PWRT disabled
   797                           ;	Brown-out Reset Enable bit
   798                           ;	BOREN = OFF, BOR disabled
   799                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   800                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   801                           ;	Data EEPROM Memory Code Protection bit
   802                           ;	CPD = OFF, Data EEPROM code protection off
   803                           ;	Flash Program Memory Write Enable bits
   804                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   805                           ;	In-Circuit Debugger Mode bit
   806                           ;	DEBUG = 0x1, unprogrammed default
   807                           ;	Flash Program Memory Code Protection bit
   808                           ;	CP = OFF, Code protection off
   809     2007                     	org	8199
   810     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80      0      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Lcdinit
    _Lcdinit->_LcdCommand

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     165
                                              7 COMMON     2     2      0
                         _LcdCommand
                            _LcdData
                            _Lcdinit
 ---------------------------------------------------------------------------------
 (1) _Lcdinit                                              3     3      0      15
                                              4 COMMON     3     3      0
                         _LcdCommand
 ---------------------------------------------------------------------------------
 (2) _LcdCommand                                           4     4      0      15
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _LcdData                                              4     4      0      15
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdCommand
   _LcdData
   _Lcdinit
     _LcdCommand

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      18     22.5%
BITBANK0            80      0       0      0.0%
COMMON              14      9      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      30      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Mar 10 21:23:58 2025

                      _i 007A                        _m 0079                        _x 007B  
                      pc 0002                       l33 0763                       l42 070F  
                     l45 0729                       l39 07EA                       u10 0749  
                     u11 0748                       u20 0763                       u21 0762  
                     u37 0771                       u47 0784                       u57 0797  
                     u67 07AA                       u77 07BD                       u87 07D0  
                     u97 07E3                       fsr 0004                      l601 0778  
                    l611 07A4                      l603 077E                      l621 07D7  
                    l613 07B1                      l605 078B                      l631 070B  
                    l623 07DD                      l615 07B7                      l607 0791  
                    l625 06F8                      l617 07C4                      l609 079E  
                    l641 0730                      l633 072A                      l627 06FB  
                    l619 07CA                      l643 0737                      l635 072F  
                    l629 06FD                      l661 075D                      l645 0741  
                    l591 0715                      l655 074A                      l647 0743  
                    l593 0717                      l657 0751                      l649 0749  
                    l595 0718                      l659 075B                      l589 0711  
                    l597 0767                      l599 076B                      u107 071E  
                    u117 0704                      fsr0 0004                      indf 0000  
                   _main 072A                     _name 0020                     btemp 007E  
                   start 0000          __end_of_LcdData 0710               _LcdCommand 0710  
        __end_of_Lcdinit 07EB                    ?_main 0070                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  main@i 0077                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EB             __end_of_main 0767  
                 ??_main 0077                ??_LcdData 0070                ??_Lcdinit 0074  
            ?_LcdCommand 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 06D2               __pmaintext 072A                  _LcdData 06F7  
                _Lcdinit 0767                  __ptext1 0767                  __ptext2 0710  
                __ptext3 06F7     end_of_initialization 07FC             ??_LcdCommand 0070  
     __end_of_LcdCommand 072A      start_initialization 07EB               init_fetch0 06E4  
            __pdataBANK0 0020              __pbssCOMMON 0079                ___latbits 0002  
               ?_LcdData 0070                 ?_Lcdinit 0070                 LcdData@i 0073  
            LcdCommand@i 0073                 main@i_56 0078                 init_ram0 06E8  
