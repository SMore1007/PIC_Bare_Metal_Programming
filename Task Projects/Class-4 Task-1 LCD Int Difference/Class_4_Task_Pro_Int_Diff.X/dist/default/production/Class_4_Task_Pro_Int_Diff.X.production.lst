

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Mar 19 22:00:32 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     0007                     PORTC           equ	7	;# 
    69     0008                     PORTD           equ	8	;# 
    70     0009                     PORTE           equ	9	;# 
    71     000A                     PCLATH          equ	10	;# 
    72     000B                     INTCON          equ	11	;# 
    73     000C                     PIR1            equ	12	;# 
    74     000D                     PIR2            equ	13	;# 
    75     000E                     TMR1            equ	14	;# 
    76     000E                     TMR1L           equ	14	;# 
    77     000F                     TMR1H           equ	15	;# 
    78     0010                     T1CON           equ	16	;# 
    79     0011                     TMR2            equ	17	;# 
    80     0012                     T2CON           equ	18	;# 
    81     0013                     SSPBUF          equ	19	;# 
    82     0014                     SSPCON          equ	20	;# 
    83     0015                     CCPR1           equ	21	;# 
    84     0015                     CCPR1L          equ	21	;# 
    85     0016                     CCPR1H          equ	22	;# 
    86     0017                     CCP1CON         equ	23	;# 
    87     0018                     RCSTA           equ	24	;# 
    88     0019                     TXREG           equ	25	;# 
    89     001A                     RCREG           equ	26	;# 
    90     001B                     CCPR2           equ	27	;# 
    91     001B                     CCPR2L          equ	27	;# 
    92     001C                     CCPR2H          equ	28	;# 
    93     001D                     CCP2CON         equ	29	;# 
    94     001E                     ADRESH          equ	30	;# 
    95     001F                     ADCON0          equ	31	;# 
    96     0081                     OPTION_REG      equ	129	;# 
    97     0085                     TRISA           equ	133	;# 
    98     0086                     TRISB           equ	134	;# 
    99     0087                     TRISC           equ	135	;# 
   100     0088                     TRISD           equ	136	;# 
   101     0089                     TRISE           equ	137	;# 
   102     008C                     PIE1            equ	140	;# 
   103     008D                     PIE2            equ	141	;# 
   104     008E                     PCON            equ	142	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0094                     SSPSTAT         equ	148	;# 
   109     0098                     TXSTA           equ	152	;# 
   110     0099                     SPBRG           equ	153	;# 
   111     009C                     CMCON           equ	156	;# 
   112     009D                     CVRCON          equ	157	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009C                     CMCON           equ	156	;# 
   172     009D                     CVRCON          equ	157	;# 
   173     009E                     ADRESL          equ	158	;# 
   174     009F                     ADCON1          equ	159	;# 
   175     010C                     EEDATA          equ	268	;# 
   176     010D                     EEADR           equ	269	;# 
   177     010E                     EEDATH          equ	270	;# 
   178     010F                     EEADRH          equ	271	;# 
   179     018C                     EECON1          equ	396	;# 
   180     018D                     EECON2          equ	397	;# 
   181     0008                     _PORTD          set	8
   182     0007                     _PORTC          set	7
   183     0088                     _TRISD          set	136
   184     0087                     _TRISC          set	135
   185                           
   186                           	psect	cinit
   187     07F1                     start_initialization:	
   188                           ; #config settings
   189                           
   190     07F1                     __initialization:
   191                           
   192                           ; Clear objects allocated to COMMON
   193     07F1  01FA               	clrf	__pbssCOMMON& (0+127)
   194     07F2  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   195     07F3  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   196                           
   197                           ; Clear objects allocated to BANK0
   198     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   199     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   200     07F6  01A8               	clrf	__pbssBANK0& (0+127)
   201     07F7  01A9               	clrf	(__pbssBANK0+1)& (0+127)
   202     07F8  01AA               	clrf	(__pbssBANK0+2)& (0+127)
   203     07F9  01AB               	clrf	(__pbssBANK0+3)& (0+127)
   204     07FA  01AC               	clrf	(__pbssBANK0+4)& (0+127)
   205     07FB  01AD               	clrf	(__pbssBANK0+5)& (0+127)
   206     07FC                     end_of_initialization:	
   207                           ;End of C runtime variable initialization code
   208                           
   209     07FC                     __end_of__initialization:
   210     07FC  0183               	clrf	3
   211     07FD  120A  118A  2E7A   	ljmp	_main	;jump to C main() function
   212                           
   213                           	psect	bssCOMMON
   214     007A                     __pbssCOMMON:
   215     007A                     _plus:
   216     007A                     	ds	1
   217     007B                     _minus:
   218     007B                     	ds	1
   219     007C                     _Equal:
   220     007C                     	ds	1
   221                           
   222                           	psect	bssBANK0
   223     0028                     __pbssBANK0:
   224     0028                     _diff:
   225     0028                     	ds	2
   226     002A                     _num2:
   227     002A                     	ds	2
   228     002C                     _num1:
   229     002C                     	ds	2
   230                           
   231                           	psect	cstackCOMMON
   232     0070                     __pcstackCOMMON:
   233     0070                     ?_Lcdinit:
   234     0070                     ?_LcdCommand:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_LcdData:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?___awdiv:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?___awmod:	
   247                           ; 2 bytes @ 0x0
   248                           
   249     0070                     ___awdiv@divisor:	
   250                           ; 2 bytes @ 0x0
   251                           
   252     0070                     ___awmod@divisor:	
   253                           ; 2 bytes @ 0x0
   254                           
   255     0070                     ??_LcdCommand:	
   256                           ; 2 bytes @ 0x0
   257                           
   258     0070                     ??_LcdData:	
   259                           ; 1 bytes @ 0x0
   260                           
   261                           
   262                           ; 1 bytes @ 0x0
   263     0070                     	ds	2
   264     0072                     ___awdiv@dividend:
   265     0072                     ___awmod@dividend:	
   266                           ; 2 bytes @ 0x2
   267                           
   268                           
   269                           ; 2 bytes @ 0x2
   270     0072                     	ds	1
   271     0073                     LcdData@i:
   272     0073                     LcdCommand@i:	
   273                           ; 1 bytes @ 0x3
   274                           
   275                           
   276                           ; 1 bytes @ 0x3
   277     0073                     	ds	1
   278     0074                     ___awdiv@counter:
   279     0074                     ___awmod@counter:	
   280                           ; 1 bytes @ 0x4
   281                           
   282     0074                     ??_Lcdinit:	
   283                           ; 1 bytes @ 0x4
   284                           
   285     0074                     ??___awdiv:	
   286                           ; 1 bytes @ 0x4
   287                           
   288     0074                     ??___awmod:	
   289                           ; 1 bytes @ 0x4
   290                           
   291                           
   292                           ; 1 bytes @ 0x4
   293     0074                     	ds	1
   294     0075                     ___awdiv@sign:
   295     0075                     ___awmod@sign:	
   296                           ; 1 bytes @ 0x5
   297                           
   298                           
   299                           ; 1 bytes @ 0x5
   300     0075                     	ds	1
   301     0076                     ___awdiv@quotient:
   302                           
   303                           ; 2 bytes @ 0x6
   304     0076                     	ds	2
   305     0078                     ?_LcdOutput:
   306     0078                     LcdOutput@i:	
   307                           ; 1 bytes @ 0x8
   308                           
   309                           
   310                           ; 2 bytes @ 0x8
   311     0078                     	ds	2
   312     007A                     ??_LcdOutput:
   313     007A                     ??_main:	
   314                           ; 1 bytes @ 0xA
   315                           
   316                           
   317                           	psect	cstackBANK0
   318     0020                     __pcstackBANK0:	
   319                           ; 1 bytes @ 0xA
   320                           
   321     0020                     LcdOutput@digits:
   322                           
   323                           ; 5 bytes @ 0x0
   324     0020                     	ds	5
   325     0025                     LcdOutput@count:
   326                           
   327                           ; 1 bytes @ 0x5
   328     0025                     	ds	1
   329     0026                     LcdOutput@j:
   330                           
   331                           ; 2 bytes @ 0x6
   332     0026                     	ds	2
   333                           
   334                           	psect	maintext
   335     067A                     __pmaintext:	
   336 ;;
   337 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   338 ;;
   339 ;; *************** function _main *****************
   340 ;; Defined at:
   341 ;;		line 28 in file "main.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;                  1    wreg      void 
   348 ;; Registers used:
   349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : B00/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   355 ;;      Params:         0       0       0       0       0
   356 ;;      Locals:         0       0       0       0       0
   357 ;;      Temps:          0       0       0       0       0
   358 ;;      Totals:         0       0       0       0       0
   359 ;;Total ram usage:        0 bytes
   360 ;; Hardware stack levels required when called: 2
   361 ;; This function calls:
   362 ;;		_LcdCommand
   363 ;;		_LcdData
   364 ;;		_LcdOutput
   365 ;;		_Lcdinit
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371     067A                     _main:	
   372                           ;psect for function _main
   373                           
   374     067A                     l971:	
   375                           ;incstack = 0
   376                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   377                           
   378                           
   379                           ;main.c: 29: 
   380     067A  120A  118A  276D  120A  118A  	fcall	_Lcdinit
   381     067F                     l973:
   382                           
   383                           ;main.c: 31:     LcdData(Equal);
   384     067F  3064               	movlw	100
   385     0680  1283               	bcf	3,5	;RP0=0, select bank0
   386     0681  1303               	bcf	3,6	;RP1=0, select bank0
   387     0682  00AC               	movwf	_num1
   388     0683  3000               	movlw	0
   389     0684  00AD               	movwf	_num1+1
   390     0685                     l975:
   391                           
   392                           ;main.c: 32: 
   393     0685  30C8               	movlw	200
   394     0686  00AA               	movwf	_num2
   395     0687  3000               	movlw	0
   396     0688  00AB               	movwf	_num2+1
   397     0689                     l977:
   398                           
   399                           ;main.c: 33:     diff = num1 - num2;
   400     0689  303D               	movlw	61
   401     068A  00FC               	movwf	_Equal
   402     068B                     l979:
   403                           
   404                           ;main.c: 34:     if(num1 > num2)
   405     068B  302D               	movlw	45
   406     068C  00FB               	movwf	_minus
   407     068D                     l981:
   408                           
   409                           ;main.c: 35:     {
   410     068D  302B               	movlw	43
   411     068E  00FA               	movwf	_plus
   412                           
   413                           ;main.c: 36:         LcdCommand(0x88);
   414     068F  3080               	movlw	128
   415     0690  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   416     0695                     l983:
   417                           
   418                           ;main.c: 37:         LcdData(plus);
   419     0695  3064               	movlw	100
   420     0696  00F8               	movwf	LcdOutput@i
   421     0697  3000               	movlw	0
   422     0698  00F9               	movwf	LcdOutput@i+1
   423     0699  120A  118A  26EA  120A  118A  	fcall	_LcdOutput
   424     069E                     l985:
   425                           
   426                           ;main.c: 39:     else
   427     069E  3083               	movlw	131
   428     069F  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   429     06A4                     l987:
   430                           
   431                           ;main.c: 40:     {
   432     06A4  302D               	movlw	45
   433     06A5  120A  118A  258D  120A  118A  	fcall	_LcdData
   434     06AA                     l989:
   435                           
   436                           ;main.c: 42:         LcdData(minus);
   437     06AA  3084               	movlw	132
   438     06AB  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   439                           
   440                           ;main.c: 43:     }
   441     06B0  30C8               	movlw	200
   442     06B1  00F8               	movwf	LcdOutput@i
   443     06B2  3000               	movlw	0
   444     06B3  00F9               	movwf	LcdOutput@i+1
   445     06B4  120A  118A  26EA  120A  118A  	fcall	_LcdOutput
   446     06B9                     l991:
   447                           
   448                           ;main.c: 45:     LcdOutput(diff);
   449     06B9  3087               	movlw	135
   450     06BA  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   451     06BF                     l993:
   452                           
   453                           ;main.c: 46: 
   454     06BF  303D               	movlw	61
   455     06C0  120A  118A  258D  120A  118A  	fcall	_LcdData
   456     06C5                     l995:
   457                           
   458                           ;main.c: 48: }
   459     06C5  309C               	movlw	156
   460     06C6  1283               	bcf	3,5	;RP0=0, select bank0
   461     06C7  1303               	bcf	3,6	;RP1=0, select bank0
   462     06C8  00A8               	movwf	_diff
   463     06C9  30FF               	movlw	255
   464     06CA  00A9               	movwf	_diff+1
   465     06CB                     l1001:
   466                           
   467                           ;main.c: 55:     if (i < 0) {;main.c: 56:         if (i == (-1-0x7fff)) {
   468     06CB  3088               	movlw	136
   469     06CC  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   470                           
   471                           ;main.c: 57: 
   472     06D1  302D               	movlw	45
   473     06D2  120A  118A  258D  120A  118A  	fcall	_LcdData
   474     06D7                     l36:	
   475                           ;main.c: 58:             i = 32767;
   476                           
   477                           
   478                           ;main.c: 59:             digits[0] = 8;
   479     06D7  3089               	movlw	137
   480     06D8  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   481     06DD                     l1003:
   482                           
   483                           ;main.c: 60:             count = 1;
   484     06DD  309C               	movlw	156
   485     06DE  00F8               	movwf	LcdOutput@i
   486     06DF  30FF               	movlw	255
   487     06E0  00F9               	movwf	LcdOutput@i+1
   488     06E1  120A  118A  26EA  120A  118A  	fcall	_LcdOutput
   489     06E6                     l37:	
   490                           ;main.c: 62:             i = -i;
   491                           
   492     06E6                     l38:
   493     06E6  2EE6               	goto	l37
   494     06E7  120A  118A  2800   	ljmp	start
   495     06EA                     __end_of_main:
   496                           
   497                           	psect	text1
   498     076D                     __ptext1:	
   499 ;; *************** function _Lcdinit *****************
   500 ;; Defined at:
   501 ;;		line 100 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   515 ;;      Params:         0       0       0       0       0
   516 ;;      Locals:         0       0       0       0       0
   517 ;;      Temps:          3       0       0       0       0
   518 ;;      Totals:         3       0       0       0       0
   519 ;;Total ram usage:        3 bytes
   520 ;; Hardware stack levels used: 1
   521 ;; Hardware stack levels required when called: 1
   522 ;; This function calls:
   523 ;;		_LcdCommand
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529     076D                     _Lcdinit:	
   530                           ;psect for function _Lcdinit
   531                           
   532     076D                     l903:	
   533                           ;incstack = 0
   534                           ; Regs used in _Lcdinit: [wreg+status,2+status,0+pclath+cstack]
   535                           
   536                           
   537                           ;main.c: 101:     _delay((unsigned long)((100)*(20000000/4000.0)));
   538     076D  1683               	bsf	3,5	;RP0=1, select bank1
   539     076E  1303               	bcf	3,6	;RP1=0, select bank1
   540     076F  0187               	clrf	7	;volatile
   541                           
   542                           ;main.c: 102:     LcdCommand(0x01);
   543     0770  0188               	clrf	8	;volatile
   544     0771                     l905:
   545                           
   546                           ;main.c: 104: }
   547     0771  3003               	movlw	3
   548     0772  00F6               	movwf	??_Lcdinit+2
   549     0773  308A               	movlw	138
   550     0774  00F5               	movwf	??_Lcdinit+1
   551     0775  3055               	movlw	85
   552     0776  00F4               	movwf	??_Lcdinit
   553     0777                     u497:
   554     0777  0BF4               	decfsz	??_Lcdinit,f
   555     0778  2F77               	goto	u497
   556     0779  0BF5               	decfsz	??_Lcdinit+1,f
   557     077A  2F77               	goto	u497
   558     077B  0BF6               	decfsz	??_Lcdinit+2,f
   559     077C  2F77               	goto	u497
   560     077D  2F7E               	nop2
   561     077E                     l907:
   562                           
   563                           ;main.c: 107: void LcdData(uint8_t i) {
   564     077E  3030               	movlw	48
   565     077F  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   566     0784                     l909:
   567                           
   568                           ;main.c: 108:     PORTC |= (0x1 << 3);
   569     0784  3003               	movlw	3
   570     0785  00F6               	movwf	??_Lcdinit+2
   571     0786  308A               	movlw	138
   572     0787  00F5               	movwf	??_Lcdinit+1
   573     0788  3055               	movlw	85
   574     0789  00F4               	movwf	??_Lcdinit
   575     078A                     u507:
   576     078A  0BF4               	decfsz	??_Lcdinit,f
   577     078B  2F8A               	goto	u507
   578     078C  0BF5               	decfsz	??_Lcdinit+1,f
   579     078D  2F8A               	goto	u507
   580     078E  0BF6               	decfsz	??_Lcdinit+2,f
   581     078F  2F8A               	goto	u507
   582     0790  2F91               	nop2
   583     0791                     l911:
   584                           
   585                           ;main.c: 109:     PORTD = i;
   586     0791  3030               	movlw	48
   587     0792  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   588     0797                     l913:
   589                           
   590                           ;main.c: 110:     PORTC |= (0x1 << 0);
   591     0797  3003               	movlw	3
   592     0798  00F6               	movwf	??_Lcdinit+2
   593     0799  308A               	movlw	138
   594     079A  00F5               	movwf	??_Lcdinit+1
   595     079B  3055               	movlw	85
   596     079C  00F4               	movwf	??_Lcdinit
   597     079D                     u517:
   598     079D  0BF4               	decfsz	??_Lcdinit,f
   599     079E  2F9D               	goto	u517
   600     079F  0BF5               	decfsz	??_Lcdinit+1,f
   601     07A0  2F9D               	goto	u517
   602     07A1  0BF6               	decfsz	??_Lcdinit+2,f
   603     07A2  2F9D               	goto	u517
   604     07A3  2FA4               	nop2
   605     07A4                     l915:
   606                           
   607                           ;main.c: 111:     _delay((unsigned long)((100)*(20000000/4000.0)));
   608     07A4  3030               	movlw	48
   609     07A5  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   610     07AA                     l917:
   611                           
   612                           ;main.c: 112:     PORTC &= ~(0x1 << 0);
   613     07AA  3003               	movlw	3
   614     07AB  00F6               	movwf	??_Lcdinit+2
   615     07AC  308A               	movlw	138
   616     07AD  00F5               	movwf	??_Lcdinit+1
   617     07AE  3055               	movlw	85
   618     07AF  00F4               	movwf	??_Lcdinit
   619     07B0                     u527:
   620     07B0  0BF4               	decfsz	??_Lcdinit,f
   621     07B1  2FB0               	goto	u527
   622     07B2  0BF5               	decfsz	??_Lcdinit+1,f
   623     07B3  2FB0               	goto	u527
   624     07B4  0BF6               	decfsz	??_Lcdinit+2,f
   625     07B5  2FB0               	goto	u527
   626     07B6  2FB7               	nop2
   627     07B7                     l919:
   628                           
   629                           ;main.c: 113: }
   630     07B7  3038               	movlw	56
   631     07B8  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   632     07BD                     l921:
   633                           
   634                           ;main.c: 114: 
   635     07BD  3003               	movlw	3
   636     07BE  00F6               	movwf	??_Lcdinit+2
   637     07BF  308A               	movlw	138
   638     07C0  00F5               	movwf	??_Lcdinit+1
   639     07C1  3055               	movlw	85
   640     07C2  00F4               	movwf	??_Lcdinit
   641     07C3                     u537:
   642     07C3  0BF4               	decfsz	??_Lcdinit,f
   643     07C4  2FC3               	goto	u537
   644     07C5  0BF5               	decfsz	??_Lcdinit+1,f
   645     07C6  2FC3               	goto	u537
   646     07C7  0BF6               	decfsz	??_Lcdinit+2,f
   647     07C8  2FC3               	goto	u537
   648     07C9  2FCA               	nop2
   649     07CA                     l923:
   650                           
   651                           ;main.c: 115: 
   652     07CA  300C               	movlw	12
   653     07CB  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   654     07D0                     l925:
   655                           
   656                           ;main.c: 116: void LcdCommand(uint8_t i) {
   657     07D0  3003               	movlw	3
   658     07D1  00F6               	movwf	??_Lcdinit+2
   659     07D2  308A               	movlw	138
   660     07D3  00F5               	movwf	??_Lcdinit+1
   661     07D4  3055               	movlw	85
   662     07D5  00F4               	movwf	??_Lcdinit
   663     07D6                     u547:
   664     07D6  0BF4               	decfsz	??_Lcdinit,f
   665     07D7  2FD6               	goto	u547
   666     07D8  0BF5               	decfsz	??_Lcdinit+1,f
   667     07D9  2FD6               	goto	u547
   668     07DA  0BF6               	decfsz	??_Lcdinit+2,f
   669     07DB  2FD6               	goto	u547
   670     07DC  2FDD               	nop2
   671     07DD                     l927:
   672                           
   673                           ;main.c: 117:     PORTC &= ~(0x1 << 3);
   674     07DD  3001               	movlw	1
   675     07DE  120A  118A  25A6  120A  118A  	fcall	_LcdCommand
   676     07E3                     l929:
   677                           
   678                           ;main.c: 118:     PORTD = i;
   679     07E3  3003               	movlw	3
   680     07E4  00F6               	movwf	??_Lcdinit+2
   681     07E5  308A               	movlw	138
   682     07E6  00F5               	movwf	??_Lcdinit+1
   683     07E7  3055               	movlw	85
   684     07E8  00F4               	movwf	??_Lcdinit
   685     07E9                     u557:
   686     07E9  0BF4               	decfsz	??_Lcdinit,f
   687     07EA  2FE9               	goto	u557
   688     07EB  0BF5               	decfsz	??_Lcdinit+1,f
   689     07EC  2FE9               	goto	u557
   690     07ED  0BF6               	decfsz	??_Lcdinit+2,f
   691     07EE  2FE9               	goto	u557
   692     07EF  2FF0               	nop2
   693     07F0                     l55:
   694     07F0  0008               	return
   695     07F1                     __end_of_Lcdinit:
   696                           
   697                           	psect	text2
   698     05A6                     __ptext2:	
   699 ;; *************** function _LcdCommand *****************
   700 ;; Defined at:
   701 ;;		line 131 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  i               1    wreg     unsigned char 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               1    3[COMMON] unsigned char 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   715 ;;      Params:         0       0       0       0       0
   716 ;;      Locals:         1       0       0       0       0
   717 ;;      Temps:          3       0       0       0       0
   718 ;;      Totals:         4       0       0       0       0
   719 ;;Total ram usage:        4 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; This function calls:
   722 ;;		Nothing
   723 ;; This function is called by:
   724 ;;		_main
   725 ;;		_Lcdinit
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729     05A6                     _LcdCommand:	
   730                           ;psect for function _LcdCommand
   731                           
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _LcdCommand: [wreg+status,2+status,0]
   735                           ;LcdCommand@i stored from wreg
   736     05A6  00F3               	movwf	LcdCommand@i
   737     05A7                     l805:
   738     05A7  30F7               	movlw	247
   739     05A8  1283               	bcf	3,5	;RP0=0, select bank0
   740     05A9  1303               	bcf	3,6	;RP1=0, select bank0
   741     05AA  0587               	andwf	7,f	;volatile
   742     05AB                     l807:
   743     05AB  0873               	movf	LcdCommand@i,w
   744     05AC  0088               	movwf	8	;volatile
   745     05AD                     l809:
   746     05AD  1407               	bsf	7,0	;volatile
   747     05AE                     l811:
   748     05AE  3003               	movlw	3
   749     05AF  00F2               	movwf	??_LcdCommand+2
   750     05B0  308A               	movlw	138
   751     05B1  00F1               	movwf	??_LcdCommand+1
   752     05B2  3055               	movlw	85
   753     05B3  00F0               	movwf	??_LcdCommand
   754     05B4                     u567:
   755     05B4  0BF0               	decfsz	??_LcdCommand,f
   756     05B5  2DB4               	goto	u567
   757     05B6  0BF1               	decfsz	??_LcdCommand+1,f
   758     05B7  2DB4               	goto	u567
   759     05B8  0BF2               	decfsz	??_LcdCommand+2,f
   760     05B9  2DB4               	goto	u567
   761     05BA  2DBB               	nop2
   762     05BB  30FE               	movlw	254
   763     05BC  1283               	bcf	3,5	;RP0=0, select bank0
   764     05BD  1303               	bcf	3,6	;RP1=0, select bank0
   765     05BE  0587               	andwf	7,f	;volatile
   766     05BF                     l61:
   767     05BF  0008               	return
   768     05C0                     __end_of_LcdCommand:
   769                           
   770                           	psect	text3
   771     06EA                     __ptext3:	
   772 ;; *************** function _LcdOutput *****************
   773 ;; Defined at:
   774 ;;		line 66 in file "main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;  i               2    8[COMMON] short 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  j               2    6[BANK0 ] int 
   779 ;;  digits          5    0[BANK0 ] unsigned char [5]
   780 ;;  count           1    5[BANK0 ] unsigned char 
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   790 ;;      Params:         2       0       0       0       0
   791 ;;      Locals:         0       8       0       0       0
   792 ;;      Temps:          0       0       0       0       0
   793 ;;      Totals:         2       8       0       0       0
   794 ;;Total ram usage:       10 bytes
   795 ;; Hardware stack levels used: 1
   796 ;; Hardware stack levels required when called: 1
   797 ;; This function calls:
   798 ;;		_LcdData
   799 ;;		___awdiv
   800 ;;		___awmod
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806     06EA                     _LcdOutput:	
   807                           ;psect for function _LcdOutput
   808                           
   809     06EA                     l931:	
   810                           ;incstack = 0
   811                           ; Regs used in _LcdOutput: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   812                           
   813                           
   814                           ;main.c: 67:         LcdData('0');;main.c: 68:         return;
   815     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   816     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   817     06EC  01A5               	clrf	LcdOutput@count
   818     06ED                     l933:
   819                           
   820                           ;main.c: 70: 
   821     06ED  1FF9               	btfss	LcdOutput@i+1,7
   822     06EE  2EF0               	goto	u441
   823     06EF  2EF1               	goto	u440
   824     06F0                     u441:
   825     06F0  2F06               	goto	l945
   826     06F1                     u440:
   827     06F1                     l935:
   828                           
   829                           ;main.c: 71: 
   830     06F1  3080               	movlw	128
   831     06F2  0679               	xorwf	LcdOutput@i+1,w
   832     06F3  0478               	iorwf	LcdOutput@i,w
   833     06F4  1D03               	btfss	3,2
   834     06F5  2EF7               	goto	u451
   835     06F6  2EF8               	goto	u450
   836     06F7                     u451:
   837     06F7  2F01               	goto	l943
   838     06F8                     u450:
   839     06F8                     l937:
   840                           
   841                           ;main.c: 73:         digits[count++] = i % 10;
   842     06F8  30FF               	movlw	255
   843     06F9  00F8               	movwf	LcdOutput@i
   844     06FA  307F               	movlw	127
   845     06FB  00F9               	movwf	LcdOutput@i+1
   846     06FC                     l939:
   847                           
   848                           ;main.c: 74:         i /= 10;
   849     06FC  3008               	movlw	8
   850     06FD  00A0               	movwf	LcdOutput@digits
   851     06FE                     l941:
   852                           
   853                           ;main.c: 75:     }
   854     06FE  3001               	movlw	1
   855     06FF  00A5               	movwf	LcdOutput@count
   856                           
   857                           ;main.c: 76: 
   858     0700  2F06               	goto	l945
   859     0701                     l943:
   860                           
   861                           ;main.c: 77: 
   862     0701  09F8               	comf	LcdOutput@i,f
   863     0702  09F9               	comf	LcdOutput@i+1,f
   864     0703  0AF8               	incf	LcdOutput@i,f
   865     0704  1903               	skipnz
   866     0705  0AF9               	incf	LcdOutput@i+1,f
   867     0706                     l945:
   868                           
   869                           ;main.c: 81: }
   870     0706  0878               	movf	LcdOutput@i,w
   871     0707  0479               	iorwf	LcdOutput@i+1,w
   872     0708  1D03               	btfss	3,2
   873     0709  2F0B               	goto	u461
   874     070A  2F0C               	goto	u460
   875     070B                     u461:
   876     070B  2F3D               	goto	l957
   877     070C                     u460:
   878     070C                     l947:
   879                           
   880                           ;main.c: 82: 
   881     070C  3030               	movlw	48
   882     070D  120A  118A  258D  120A  118A  	fcall	_LcdData
   883     0712  2F6C               	goto	l47
   884     0713                     l951:
   885                           
   886                           ;main.c: 88: 
   887     0713  1283               	bcf	3,5	;RP0=0, select bank0
   888     0714  1303               	bcf	3,6	;RP1=0, select bank0
   889     0715  0825               	movf	LcdOutput@count,w
   890     0716  3E20               	addlw	(low (LcdOutput@digits| 0))& (0+255)
   891     0717  0084               	movwf	4
   892     0718  300A               	movlw	10
   893     0719  00F0               	movwf	___awmod@divisor
   894     071A  3000               	movlw	0
   895     071B  00F1               	movwf	___awmod@divisor+1
   896     071C  0879               	movf	LcdOutput@i+1,w
   897     071D  00F3               	movwf	___awmod@dividend+1
   898     071E  0878               	movf	LcdOutput@i,w
   899     071F  00F2               	movwf	___awmod@dividend
   900     0720  120A  118A  25C0  120A  118A  	fcall	___awmod
   901     0725  0870               	movf	?___awmod,w
   902     0726  1383               	bcf	3,7	;select IRP bank0
   903     0727  0080               	movwf	0
   904     0728                     l953:
   905     0728  3001               	movlw	1
   906     0729  1283               	bcf	3,5	;RP0=0, select bank0
   907     072A  1303               	bcf	3,6	;RP1=0, select bank0
   908     072B  07A5               	addwf	LcdOutput@count,f
   909     072C                     l955:
   910                           
   911                           ;main.c: 89:     _delay((unsigned long)((100)*(20000000/4000.0)));
   912     072C  300A               	movlw	10
   913     072D  00F0               	movwf	___awdiv@divisor
   914     072E  3000               	movlw	0
   915     072F  00F1               	movwf	___awdiv@divisor+1
   916     0730  0879               	movf	LcdOutput@i+1,w
   917     0731  00F3               	movwf	___awdiv@dividend+1
   918     0732  0878               	movf	LcdOutput@i,w
   919     0733  00F2               	movwf	___awdiv@dividend
   920     0734  120A  118A  2617  120A  118A  	fcall	___awdiv
   921     0739  0871               	movf	?___awdiv+1,w
   922     073A  00F9               	movwf	LcdOutput@i+1
   923     073B  0870               	movf	?___awdiv,w
   924     073C  00F8               	movwf	LcdOutput@i
   925     073D                     l957:
   926                           
   927                           ;main.c: 87:     TRISD = 0x00;
   928     073D  0879               	movf	LcdOutput@i+1,w
   929     073E  3A80               	xorlw	128
   930     073F  00FF               	movwf	btemp+1
   931     0740  3080               	movlw	128
   932     0741  027F               	subwf	btemp+1,w
   933     0742  1D03               	skipz
   934     0743  2F46               	goto	u475
   935     0744  3001               	movlw	1
   936     0745  0278               	subwf	LcdOutput@i,w
   937     0746                     u475:
   938     0746  1803               	skipnc
   939     0747  2F49               	goto	u471
   940     0748  2F4A               	goto	u470
   941     0749                     u471:
   942     0749  2F13               	goto	l951
   943     074A                     u470:
   944     074A                     l959:
   945                           
   946                           ;main.c: 93:     _delay((unsigned long)((100)*(20000000/4000.0)));
   947     074A  1283               	bcf	3,5	;RP0=0, select bank0
   948     074B  1303               	bcf	3,6	;RP1=0, select bank0
   949     074C  0825               	movf	LcdOutput@count,w
   950     074D  3EFF               	addlw	255
   951     074E  00A6               	movwf	LcdOutput@j
   952     074F  30FF               	movlw	255
   953     0750  1803               	skipnc
   954     0751  3000               	movlw	0
   955     0752  00A7               	movwf	LcdOutput@j+1
   956     0753                     l961:
   957     0753  1FA7               	btfss	LcdOutput@j+1,7
   958     0754  2F56               	goto	u481
   959     0755  2F57               	goto	u480
   960     0756                     u481:
   961     0756  2F58               	goto	l965
   962     0757                     u480:
   963     0757  2F6C               	goto	l47
   964     0758                     l965:
   965                           
   966                           ;main.c: 94:     LcdCommand(0x30);
   967     0758  0826               	movf	LcdOutput@j,w
   968     0759  3E20               	addlw	(low (LcdOutput@digits| 0))& (0+255)
   969     075A  0084               	movwf	4
   970     075B  1383               	bcf	3,7	;select IRP bank0
   971     075C  0800               	movf	0,w
   972     075D  3E30               	addlw	48
   973     075E  120A  118A  258D  120A  118A  	fcall	_LcdData
   974     0763                     l967:
   975                           
   976                           ;main.c: 95:     _delay((unsigned long)((100)*(20000000/4000.0)));
   977     0763  30FF               	movlw	255
   978     0764  1283               	bcf	3,5	;RP0=0, select bank0
   979     0765  1303               	bcf	3,6	;RP1=0, select bank0
   980     0766  07A6               	addwf	LcdOutput@j,f
   981     0767  1803               	skipnc
   982     0768  0AA7               	incf	LcdOutput@j+1,f
   983     0769  30FF               	movlw	255
   984     076A  07A7               	addwf	LcdOutput@j+1,f
   985     076B  2F53               	goto	l961
   986     076C                     l47:
   987     076C  0008               	return
   988     076D                     __end_of_LcdOutput:
   989                           
   990                           	psect	text4
   991     05C0                     __ptext4:	
   992 ;; *************** function ___awmod *****************
   993 ;; Defined at:
   994 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  divisor         2    0[COMMON] int 
   997 ;;  dividend        2    2[COMMON] int 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  sign            1    5[COMMON] unsigned char 
  1000 ;;  counter         1    4[COMMON] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2    0[COMMON] int 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         4       0       0       0       0
  1011 ;;      Locals:         2       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0
  1013 ;;      Totals:         6       0       0       0       0
  1014 ;;Total ram usage:        6 bytes
  1015 ;; Hardware stack levels used: 1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_LcdOutput
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023     05C0                     ___awmod:	
  1024                           ;psect for function ___awmod
  1025                           
  1026     05C0                     l865:	
  1027                           ;incstack = 0
  1028                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1029                           
  1030     05C0  01F5               	clrf	___awmod@sign
  1031     05C1                     l867:
  1032     05C1  1FF3               	btfss	___awmod@dividend+1,7
  1033     05C2  2DC4               	goto	u351
  1034     05C3  2DC5               	goto	u350
  1035     05C4                     u351:
  1036     05C4  2DCC               	goto	l873
  1037     05C5                     u350:
  1038     05C5                     l869:
  1039     05C5  09F2               	comf	___awmod@dividend,f
  1040     05C6  09F3               	comf	___awmod@dividend+1,f
  1041     05C7  0AF2               	incf	___awmod@dividend,f
  1042     05C8  1903               	skipnz
  1043     05C9  0AF3               	incf	___awmod@dividend+1,f
  1044     05CA                     l871:
  1045     05CA  3001               	movlw	1
  1046     05CB  00F5               	movwf	___awmod@sign
  1047     05CC                     l873:
  1048     05CC  1FF1               	btfss	___awmod@divisor+1,7
  1049     05CD  2DCF               	goto	u361
  1050     05CE  2DD0               	goto	u360
  1051     05CF                     u361:
  1052     05CF  2DD5               	goto	l877
  1053     05D0                     u360:
  1054     05D0                     l875:
  1055     05D0  09F0               	comf	___awmod@divisor,f
  1056     05D1  09F1               	comf	___awmod@divisor+1,f
  1057     05D2  0AF0               	incf	___awmod@divisor,f
  1058     05D3  1903               	skipnz
  1059     05D4  0AF1               	incf	___awmod@divisor+1,f
  1060     05D5                     l877:
  1061     05D5  0870               	movf	___awmod@divisor,w
  1062     05D6  0471               	iorwf	___awmod@divisor+1,w
  1063     05D7  1903               	btfsc	3,2
  1064     05D8  2DDA               	goto	u371
  1065     05D9  2DDB               	goto	u370
  1066     05DA                     u371:
  1067     05DA  2E08               	goto	l895
  1068     05DB                     u370:
  1069     05DB                     l879:
  1070     05DB  3001               	movlw	1
  1071     05DC  00F4               	movwf	___awmod@counter
  1072     05DD  2DE7               	goto	l885
  1073     05DE                     l881:
  1074     05DE  3001               	movlw	1
  1075     05DF                     u385:
  1076     05DF  1003               	clrc
  1077     05E0  0DF0               	rlf	___awmod@divisor,f
  1078     05E1  0DF1               	rlf	___awmod@divisor+1,f
  1079     05E2  3EFF               	addlw	-1
  1080     05E3  1D03               	skipz
  1081     05E4  2DDF               	goto	u385
  1082     05E5                     l883:
  1083     05E5  3001               	movlw	1
  1084     05E6  07F4               	addwf	___awmod@counter,f
  1085     05E7                     l885:
  1086     05E7  1FF1               	btfss	___awmod@divisor+1,7
  1087     05E8  2DEA               	goto	u391
  1088     05E9  2DEB               	goto	u390
  1089     05EA                     u391:
  1090     05EA  2DDE               	goto	l881
  1091     05EB                     u390:
  1092     05EB                     l887:
  1093     05EB  0871               	movf	___awmod@divisor+1,w
  1094     05EC  0273               	subwf	___awmod@dividend+1,w
  1095     05ED  1D03               	skipz
  1096     05EE  2DF1               	goto	u405
  1097     05EF  0870               	movf	___awmod@divisor,w
  1098     05F0  0272               	subwf	___awmod@dividend,w
  1099     05F1                     u405:
  1100     05F1  1C03               	skipc
  1101     05F2  2DF4               	goto	u401
  1102     05F3  2DF5               	goto	u400
  1103     05F4                     u401:
  1104     05F4  2DFB               	goto	l891
  1105     05F5                     u400:
  1106     05F5                     l889:
  1107     05F5  0870               	movf	___awmod@divisor,w
  1108     05F6  02F2               	subwf	___awmod@dividend,f
  1109     05F7  0871               	movf	___awmod@divisor+1,w
  1110     05F8  1C03               	skipc
  1111     05F9  03F3               	decf	___awmod@dividend+1,f
  1112     05FA  02F3               	subwf	___awmod@dividend+1,f
  1113     05FB                     l891:
  1114     05FB  3001               	movlw	1
  1115     05FC                     u415:
  1116     05FC  1003               	clrc
  1117     05FD  0CF1               	rrf	___awmod@divisor+1,f
  1118     05FE  0CF0               	rrf	___awmod@divisor,f
  1119     05FF  3EFF               	addlw	-1
  1120     0600  1D03               	skipz
  1121     0601  2DFC               	goto	u415
  1122     0602                     l893:
  1123     0602  3001               	movlw	1
  1124     0603  02F4               	subwf	___awmod@counter,f
  1125     0604  1D03               	btfss	3,2
  1126     0605  2E07               	goto	u421
  1127     0606  2E08               	goto	u420
  1128     0607                     u421:
  1129     0607  2DEB               	goto	l887
  1130     0608                     u420:
  1131     0608                     l895:
  1132     0608  0875               	movf	___awmod@sign,w
  1133     0609  1903               	btfsc	3,2
  1134     060A  2E0C               	goto	u431
  1135     060B  2E0D               	goto	u430
  1136     060C                     u431:
  1137     060C  2E12               	goto	l899
  1138     060D                     u430:
  1139     060D                     l897:
  1140     060D  09F2               	comf	___awmod@dividend,f
  1141     060E  09F3               	comf	___awmod@dividend+1,f
  1142     060F  0AF2               	incf	___awmod@dividend,f
  1143     0610  1903               	skipnz
  1144     0611  0AF3               	incf	___awmod@dividend+1,f
  1145     0612                     l899:
  1146     0612  0873               	movf	___awmod@dividend+1,w
  1147     0613  00F1               	movwf	?___awmod+1
  1148     0614  0872               	movf	___awmod@dividend,w
  1149     0615  00F0               	movwf	?___awmod
  1150     0616                     l313:
  1151     0616  0008               	return
  1152     0617                     __end_of___awmod:
  1153                           
  1154                           	psect	text5
  1155     0617                     __ptext5:	
  1156 ;; *************** function ___awdiv *****************
  1157 ;; Defined at:
  1158 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  divisor         2    0[COMMON] int 
  1161 ;;  dividend        2    2[COMMON] int 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  quotient        2    6[COMMON] int 
  1164 ;;  sign            1    5[COMMON] unsigned char 
  1165 ;;  counter         1    4[COMMON] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  2    0[COMMON] int 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         4       0       0       0       0
  1176 ;;      Locals:         4       0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0
  1178 ;;      Totals:         8       0       0       0       0
  1179 ;;Total ram usage:        8 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_LcdOutput
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188     0617                     ___awdiv:	
  1189                           ;psect for function ___awdiv
  1190                           
  1191     0617                     l821:	
  1192                           ;incstack = 0
  1193                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1194                           
  1195     0617  01F5               	clrf	___awdiv@sign
  1196     0618                     l823:
  1197     0618  1FF1               	btfss	___awdiv@divisor+1,7
  1198     0619  2E1B               	goto	u251
  1199     061A  2E1C               	goto	u250
  1200     061B                     u251:
  1201     061B  2E23               	goto	l829
  1202     061C                     u250:
  1203     061C                     l825:
  1204     061C  09F0               	comf	___awdiv@divisor,f
  1205     061D  09F1               	comf	___awdiv@divisor+1,f
  1206     061E  0AF0               	incf	___awdiv@divisor,f
  1207     061F  1903               	skipnz
  1208     0620  0AF1               	incf	___awdiv@divisor+1,f
  1209     0621                     l827:
  1210     0621  3001               	movlw	1
  1211     0622  00F5               	movwf	___awdiv@sign
  1212     0623                     l829:
  1213     0623  1FF3               	btfss	___awdiv@dividend+1,7
  1214     0624  2E26               	goto	u261
  1215     0625  2E27               	goto	u260
  1216     0626                     u261:
  1217     0626  2E2E               	goto	l835
  1218     0627                     u260:
  1219     0627                     l831:
  1220     0627  09F2               	comf	___awdiv@dividend,f
  1221     0628  09F3               	comf	___awdiv@dividend+1,f
  1222     0629  0AF2               	incf	___awdiv@dividend,f
  1223     062A  1903               	skipnz
  1224     062B  0AF3               	incf	___awdiv@dividend+1,f
  1225     062C                     l833:
  1226     062C  3001               	movlw	1
  1227     062D  06F5               	xorwf	___awdiv@sign,f
  1228     062E                     l835:
  1229     062E  01F6               	clrf	___awdiv@quotient
  1230     062F  01F7               	clrf	___awdiv@quotient+1
  1231     0630                     l837:
  1232     0630  0870               	movf	___awdiv@divisor,w
  1233     0631  0471               	iorwf	___awdiv@divisor+1,w
  1234     0632  1903               	btfsc	3,2
  1235     0633  2E35               	goto	u271
  1236     0634  2E36               	goto	u270
  1237     0635                     u271:
  1238     0635  2E6B               	goto	l857
  1239     0636                     u270:
  1240     0636                     l839:
  1241     0636  3001               	movlw	1
  1242     0637  00F4               	movwf	___awdiv@counter
  1243     0638  2E42               	goto	l845
  1244     0639                     l841:
  1245     0639  3001               	movlw	1
  1246     063A                     u285:
  1247     063A  1003               	clrc
  1248     063B  0DF0               	rlf	___awdiv@divisor,f
  1249     063C  0DF1               	rlf	___awdiv@divisor+1,f
  1250     063D  3EFF               	addlw	-1
  1251     063E  1D03               	skipz
  1252     063F  2E3A               	goto	u285
  1253     0640                     l843:
  1254     0640  3001               	movlw	1
  1255     0641  07F4               	addwf	___awdiv@counter,f
  1256     0642                     l845:
  1257     0642  1FF1               	btfss	___awdiv@divisor+1,7
  1258     0643  2E45               	goto	u291
  1259     0644  2E46               	goto	u290
  1260     0645                     u291:
  1261     0645  2E39               	goto	l841
  1262     0646                     u290:
  1263     0646                     l847:
  1264     0646  3001               	movlw	1
  1265     0647                     u305:
  1266     0647  1003               	clrc
  1267     0648  0DF6               	rlf	___awdiv@quotient,f
  1268     0649  0DF7               	rlf	___awdiv@quotient+1,f
  1269     064A  3EFF               	addlw	-1
  1270     064B  1D03               	skipz
  1271     064C  2E47               	goto	u305
  1272     064D  0871               	movf	___awdiv@divisor+1,w
  1273     064E  0273               	subwf	___awdiv@dividend+1,w
  1274     064F  1D03               	skipz
  1275     0650  2E53               	goto	u315
  1276     0651  0870               	movf	___awdiv@divisor,w
  1277     0652  0272               	subwf	___awdiv@dividend,w
  1278     0653                     u315:
  1279     0653  1C03               	skipc
  1280     0654  2E56               	goto	u311
  1281     0655  2E57               	goto	u310
  1282     0656                     u311:
  1283     0656  2E5E               	goto	l853
  1284     0657                     u310:
  1285     0657                     l849:
  1286     0657  0870               	movf	___awdiv@divisor,w
  1287     0658  02F2               	subwf	___awdiv@dividend,f
  1288     0659  0871               	movf	___awdiv@divisor+1,w
  1289     065A  1C03               	skipc
  1290     065B  03F3               	decf	___awdiv@dividend+1,f
  1291     065C  02F3               	subwf	___awdiv@dividend+1,f
  1292     065D                     l851:
  1293     065D  1476               	bsf	___awdiv@quotient,0
  1294     065E                     l853:
  1295     065E  3001               	movlw	1
  1296     065F                     u325:
  1297     065F  1003               	clrc
  1298     0660  0CF1               	rrf	___awdiv@divisor+1,f
  1299     0661  0CF0               	rrf	___awdiv@divisor,f
  1300     0662  3EFF               	addlw	-1
  1301     0663  1D03               	skipz
  1302     0664  2E5F               	goto	u325
  1303     0665                     l855:
  1304     0665  3001               	movlw	1
  1305     0666  02F4               	subwf	___awdiv@counter,f
  1306     0667  1D03               	btfss	3,2
  1307     0668  2E6A               	goto	u331
  1308     0669  2E6B               	goto	u330
  1309     066A                     u331:
  1310     066A  2E46               	goto	l847
  1311     066B                     u330:
  1312     066B                     l857:
  1313     066B  0875               	movf	___awdiv@sign,w
  1314     066C  1903               	btfsc	3,2
  1315     066D  2E6F               	goto	u341
  1316     066E  2E70               	goto	u340
  1317     066F                     u341:
  1318     066F  2E75               	goto	l861
  1319     0670                     u340:
  1320     0670                     l859:
  1321     0670  09F6               	comf	___awdiv@quotient,f
  1322     0671  09F7               	comf	___awdiv@quotient+1,f
  1323     0672  0AF6               	incf	___awdiv@quotient,f
  1324     0673  1903               	skipnz
  1325     0674  0AF7               	incf	___awdiv@quotient+1,f
  1326     0675                     l861:
  1327     0675  0877               	movf	___awdiv@quotient+1,w
  1328     0676  00F1               	movwf	?___awdiv+1
  1329     0677  0876               	movf	___awdiv@quotient,w
  1330     0678  00F0               	movwf	?___awdiv
  1331     0679                     l300:
  1332     0679  0008               	return
  1333     067A                     __end_of___awdiv:
  1334                           
  1335                           	psect	text6
  1336     058D                     __ptext6:	
  1337 ;; *************** function _LcdData *****************
  1338 ;; Defined at:
  1339 ;;		line 122 in file "main.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  i               1    wreg     unsigned char 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  i               1    3[COMMON] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1353 ;;      Params:         0       0       0       0       0
  1354 ;;      Locals:         1       0       0       0       0
  1355 ;;      Temps:          3       0       0       0       0
  1356 ;;      Totals:         4       0       0       0       0
  1357 ;;Total ram usage:        4 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;;		_LcdOutput
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367     058D                     _LcdData:	
  1368                           ;psect for function _LcdData
  1369                           
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _LcdData: [wreg+status,2+status,0]
  1373                           ;LcdData@i stored from wreg
  1374     058D  00F3               	movwf	LcdData@i
  1375     058E                     l813:
  1376     058E  1283               	bcf	3,5	;RP0=0, select bank0
  1377     058F  1303               	bcf	3,6	;RP1=0, select bank0
  1378     0590  1587               	bsf	7,3	;volatile
  1379     0591                     l815:
  1380     0591  0873               	movf	LcdData@i,w
  1381     0592  0088               	movwf	8	;volatile
  1382     0593                     l817:
  1383     0593  1407               	bsf	7,0	;volatile
  1384     0594  3003               	movlw	3
  1385     0595  00F2               	movwf	??_LcdData+2
  1386     0596  308A               	movlw	138
  1387     0597  00F1               	movwf	??_LcdData+1
  1388     0598  3055               	movlw	85
  1389     0599  00F0               	movwf	??_LcdData
  1390     059A                     u577:
  1391     059A  0BF0               	decfsz	??_LcdData,f
  1392     059B  2D9A               	goto	u577
  1393     059C  0BF1               	decfsz	??_LcdData+1,f
  1394     059D  2D9A               	goto	u577
  1395     059E  0BF2               	decfsz	??_LcdData+2,f
  1396     059F  2D9A               	goto	u577
  1397     05A0  2DA1               	nop2
  1398     05A1                     l819:
  1399     05A1  30FE               	movlw	254
  1400     05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1401     05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1402     05A4  0587               	andwf	7,f	;volatile
  1403     05A5                     l58:
  1404     05A5  0008               	return
  1405     05A6                     __end_of_LcdData:
  1406     0002                     ___latbits      equ	2
  1407     007E                     btemp           set	126	;btemp
  1408     007E                     wtemp0          set	126
  1409                           
  1410                           	psect	config
  1411                           
  1412                           ;Config register CONFIG @ 0x2007
  1413                           ;	Oscillator Selection bits
  1414                           ;	FOSC = HS, HS oscillator
  1415                           ;	Watchdog Timer Enable bit
  1416                           ;	WDTE = OFF, WDT disabled
  1417                           ;	Power-up Timer Enable bit
  1418                           ;	PWRTE = OFF, PWRT disabled
  1419                           ;	Brown-out Reset Enable bit
  1420                           ;	BOREN = OFF, BOR disabled
  1421                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1422                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1423                           ;	Data EEPROM Memory Code Protection bit
  1424                           ;	CPD = OFF, Data EEPROM code protection off
  1425                           ;	Flash Program Memory Write Enable bits
  1426                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1427                           ;	In-Circuit Debugger Mode bit
  1428                           ;	DEBUG = 0x1, unprogrammed default
  1429                           ;	Flash Program Memory Code Protection bit
  1430                           ;	CP = OFF, Code protection off
  1431     2007                     	org	8199
  1432     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80      8      14
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LcdOutput
    _Lcdinit->_LcdCommand
    _LcdOutput->___awdiv

Critical Paths under _main in BANK0

    _main->_LcdOutput

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1039
                         _LcdCommand
                            _LcdData
                          _LcdOutput
                            _Lcdinit
 ---------------------------------------------------------------------------------
 (1) _Lcdinit                                              3     3      0      29
                                              4 COMMON     3     3      0
                         _LcdCommand
 ---------------------------------------------------------------------------------
 (2) _LcdCommand                                           4     4      0      29
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _LcdOutput                                           10     8      2     952
                                              8 COMMON     2     0      2
                                              0 BANK0      8     8      0
                            _LcdData
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LcdData                                              4     4      0      29
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdCommand
   _LcdData
   _LcdOutput
     _LcdData
     ___awdiv
     ___awmod
   _Lcdinit
     _LcdCommand

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      13     92.9%
BANK0               80      8      14     17.5%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      27      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Mar 19 22:00:32 2025

                     l36 06D7                       l61 05BF                       l37 06E6  
                     l38 06E6                       l47 076C                       l55 07F0  
                     l58 05A5             ___awdiv@sign 0075                      l300 0679  
                    l313 0616                      l811 05AE                      l813 058E  
                    l821 0617                      l805 05A7                      l815 0591  
                    l831 0627                      l823 0618                      l807 05AB  
                    l911 0791                      l903 076D                      l817 0593  
                    l841 0639                      l833 062C                      l825 061C  
                    l809 05AD                      l921 07BD                      l913 0797  
                    l905 0771                      l819 05A1                      l851 065D  
                    l843 0640                      l835 062E                      l827 0621  
                    l931 06EA                      l923 07CA                      l915 07A4  
                    l907 077E                      l861 0675                      l853 065E  
                    l845 0642                      l837 0630                      l829 0623  
                    l941 06FE                      l933 06ED                      l925 07D0  
                    l917 07AA                      l909 0784                      l855 0665  
                    l847 0646                      l839 0636                      l871 05CA  
                    l951 0713                      l943 0701                      l935 06F1  
                    l927 07DD                      l919 07B7                      l849 0657  
                    l857 066B                      l881 05DE                      l873 05CC  
                    l865 05C0                      l961 0753                      l953 0728  
                    l937 06F8                      l945 0706                      l929 07E3  
                    l859 0670                      l891 05FB                      l883 05E5  
                    l875 05D0                      l867 05C1                      l955 072C  
                    l947 070C                      l939 06FC                      l971 067A  
                    l893 0602                      l885 05E7                      l877 05D5  
                    l869 05C5                      l965 0758                      l957 073D  
                    l981 068D                      l973 067F                      l887 05EB  
                    l879 05DB                      l895 0608                      l967 0763  
                    l959 074A                      l991 06B9                      l983 0695  
                    l975 0685                      l897 060D                      l889 05F5  
                    l993 06BF                      l985 069E                      l977 0689  
                    l899 0612                      l995 06C5                      l987 06A4  
                    l979 068B                      l989 06AA                      u310 0657  
                    u311 0656                      u400 05F5                      u305 0647  
                    u401 05F4                      u330 066B                      u250 061C  
                    u331 066A                      u315 0653                      u251 061B  
                    u340 0670                      u260 0627                      u420 0608  
                    u341 066F                      u325 065F                      u261 0626  
                    u421 0607                      u405 05F1                      u270 0636  
                    u430 060D                      u350 05C5                      u271 0635  
                    u431 060C                      u415 05FC                      u351 05C4  
                    u360 05D0                      u440 06F1                      u361 05CF  
                    u441 06F0                      u290 0646                      u370 05DB  
                    u450 06F8                      u291 0645                      u371 05DA  
                    u451 06F7                      u507 078A                      u460 070C  
                    u285 063A                      u461 070B                      u517 079D  
                    u390 05EB                      u470 074A                      u391 05EA  
                    u471 0749                      u527 07B0                      u480 0757  
                    u385 05DF                      u481 0756                      u537 07C3  
                    u475 0746                      u547 07D6                      u557 07E9  
                    u567 05B4                      u577 059A                      u497 0777  
                    fsr0 0004                      indf 0000             ___awmod@sign 0075  
                   l1001 06CB                     l1003 06DD                     _diff 0028  
                   _main 067A                     _num1 002C                     _num2 002A  
                   _plus 007A                     btemp 007E                     start 0000  
        __end_of_LcdData 05A6               _LcdCommand 05A6          __end_of_Lcdinit 07F1  
                  ?_main 0070          __end_of___awdiv 067A          __end_of___awmod 0617  
        ___awdiv@divisor 0070          ___awdiv@counter 0074                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _Equal 007C                    _minus 007B                    status 0003  
                  wtemp0 007E          __initialization 07F1             __end_of_main 06EA  
                 ??_main 007A         ___awdiv@dividend 0072                ??_LcdData 0070  
              ??_Lcdinit 0074              ?_LcdCommand 0070                ??___awdiv 0074  
              ??___awmod 0074         ___awdiv@quotient 0076          ___awmod@divisor 0070  
        ___awmod@counter 0074  __end_of__initialization 07FC        __end_of_LcdOutput 076D  
         __pcstackCOMMON 0070               __pbssBANK0 0028           LcdOutput@count 0025  
             __pmaintext 067A                  _LcdData 058D                  _Lcdinit 076D  
                ___awdiv 0617                  ___awmod 05C0                  __ptext1 076D  
                __ptext2 05A6                  __ptext3 06EA                  __ptext4 05C0  
                __ptext5 0617                  __ptext6 058D         ___awmod@dividend 0072  
   end_of_initialization 07FC             ??_LcdCommand 0070       __end_of_LcdCommand 05C0  
              _LcdOutput 06EA      start_initialization 07F1               ?_LcdOutput 0078  
            __pbssCOMMON 007A                ___latbits 0002            __pcstackBANK0 0020  
               ?_LcdData 0070                 ?_Lcdinit 0070          LcdOutput@digits 0020  
               ?___awdiv 0070                 ?___awmod 0070                 LcdData@i 0073  
            ??_LcdOutput 007A              LcdCommand@i 0073               LcdOutput@i 0078  
             LcdOutput@j 0026  
